import { StatusBar } from 'expo-status-bar';
// import React from 'react';
import React, {useState, useRef, Component} from 'react';
import { StyleSheet, Text, View, SafeAreaView, Platform, TouchableHighlight, Image, ImageBackground} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { List, DataTable, Checkbox, Dialog, Portal, Paragraph, Modal, Provider, Snackbar, Button } from 'react-native-paper'
import Animated, { Easing, useSharedValue, useDerivedValue, interpolateColors, withSpring, useAnimatedStyle, repeat, delay, 
  useAnimatedGestureHandler, withTiming, sequence, EasingNode } from 'react-native-reanimated';
import ReanimatedScreen2 from './ReanimatedScreen2';
import {PanGestureHandler, TouchableWithoutFeedback} from 'react-native-gesture-handler'

const Box = (props) => {
  const x = useSharedValue(100);
  const y = useSharedValue(10);

  const Handler = useAnimatedGestureHandler({
    onStart: (event, ctx) => {
      ctx.startX = x.value;
    }, 

    onActive: (event, ctx) => {
      x.value = ctx.startX + event.translationX;
      if (x.value > 574) {
        x.value = 574
      }

      else if (x.value < -574) {
        x.value = -574
      }
    },

    onEnd: (event, ctx) => {

    }
  });

  const animatedStyle = useAnimatedStyle( () => {
    return {
      transform: [
        {translateX: x.value}, 
        {translateY: y.value}
      ]
    }
  });

  return (
    <PanGestureHandler onGestureEvent = {Handler}>
      <Animated.View style = {[animatedStyle]}>
        <ImageBackground source = {require('./../../assets/scroll.png')} style = {{width: 1560, height: '100%'}}>
        </ImageBackground>
      </Animated.View>
    </PanGestureHandler>
  )
}

function MainScreen()
{
  const pressSetting = () =>
  {
    alert("환경설정");
  }

  const [visibleCity, setCity] = React.useState(false);

  const [visibleAnt, setAnt] = React.useState(false);

  const [visibleBuilding, setBuilding] = React.useState(false);

  const [visibleMap, setMap] = React.useState(false);

  const [visibleWorker, setWorker] = React.useState(false);
  const showWorker = () => setWorker(true);
  const hideWorker = () => setWorker(false);

  const [visibleSupervisor, setSupervisor] = React.useState(false);
  const showSupervisor = () => setSupervisor(true);
  const hideSupervisor = () => setSupervisor(false);

  const [visibleOffice, setOffice] = React.useState(false);
  const showOffice = () => setOffice(true);
  const hideOffice = () => setOffice(false);

  const [visibleChairman, setChairman] = React.useState(false);
  const showChairman = () => setChairman(true);
  const hideChairman = () => setChairman(false);

  const [visibleHouse, setHouse] = React.useState(false);
  const showHouse = () => setHouse(true);
  const hideHouse = () => setHouse(false);

  const [visibleApartment, setApartment] = React.useState(false);
  const showApartment = () => setApartment(true);
  const hideApartment = () => setApartment(false);

  const [visibleCompany, setCompany] = React.useState(false);
  const showCompany = () => setCompany(true);
  const hideCompany = () => setCompany(false);

  const [visibleHotel, setHotel] = React.useState(false);
  const showHotel = () => setHotel(true);
  const hideHotel = () => setHotel(false);

  const [visibleStore, setStore] = React.useState(true);

  const [visibleCollection, setCollection] = React.useState(false);

  const [visibleExpansion, setExpansion] = React.useState(false);

  const [visibleAchievement, setAchievement] = React.useState(false);

  const [visbleMain, setMain] = React.useState(true);
  const showMain = () => setMain(false);

  const [visbleList, setList] = React.useState(false);

  const [cityClick, setCityClick] = React.useState(false);
  const [antClick, setAntClick] = React.useState(false);
  const [buildingClick, setBuildingClick] = React.useState(false);
  const [mapClick, setMapClick] = React.useState(false);

  const [mapChange, setChange] = React.useState(false);

  const scale = useSharedValue(1);

  scale.value = sequence( withTiming(0.8), repeat( withTiming(1.2), -1, true) );

  const aniStyle = useAnimatedStyle( () => {
    return {
      transform: [
        {scale: scale.value},
      ]
    }
  })

  const [background, setBack] = React.useState(require('./../../assets/축소게임화면.png'));

  let main = null;

  let list = null;

  let clickBuilding = <Image source = {require('./../../assets/BuildingButton.png')} />;
  let clickCity = <Image source = {require('./../../assets/CityButton.png')} />;
  let clickAnt = <Image source = {require('./../../assets/AntButton.png')} />;
  let clickMap = <Image source = {require('./../../assets/MapButton.png')} />;

  let city1 = 
  <Animated.View style = {{transform: [{translateX: -75}, {translateY: 66}]}}>
    <TouchableHighlight onPress={() => {
      setChange(true)
      }}>
      <View style = {{height: 140, width: 300}}/>   
    </TouchableHighlight>
  </Animated.View> 

  let expansion = null;

  if (mapChange) {
    city1 = null;

    expansion = 
    <Modal visible = {mapChange}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Box/>
      </View>
    </Modal>
  }

  else  {
  city1 = 
  <Animated.View style = {{transform: [{translateX: -75}, {translateY: 66}]}}>
  <TouchableHighlight onPress={() =>  {
    setChange(true)
    }}>
    <View style = {{height: 140, width: 300}}/>   
  </TouchableHighlight>
  </Animated.View>;

  expansion = null;

  }

  if (visbleMain) {
    main = 
    <Modal visible = {visbleMain} onDismiss = {showMain}>      
      <TouchableHighlight onPress = {showMain}>  
      <View style = {{alignItems: 'center', justifyContent: 'center', backgroundColor: 'white', height: '100%', width: '100%'}}>
        <Animated.View style = {aniStyle}>     
        <Button onPress = {showMain} color = 'black'>TAP TO START</Button>
        </Animated.View>    
      </View>
      </TouchableHighlight>
    </Modal>
  }

  else  {
    main = null
  }

  if (visbleList) {
    if (visibleCity) {
      list = 
      <DataTable style = {{backgroundColor: 'white'}}>
            <DataTable.Row>
              <DataTable.Cell>시장</DataTable.Cell>
              <DataTable.Cell>진우</DataTable.Cell>

            </DataTable.Row>
              <DataTable.Row>
              <DataTable.Cell>도시 등급</DataTable.Cell>
              <DataTable.Cell>소도시</DataTable.Cell>

            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>보유자원</DataTable.Cell>
              <DataTable.Cell>73503</DataTable.Cell>

            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>인구수</DataTable.Cell>
              <DataTable.Cell>3502</DataTable.Cell>

            </DataTable.Row>

      </DataTable>
    }

    else if (visibleAnt) {
      list = 
      <DataTable style = {{backgroundColor: 'white'}}>
            <DataTable.Row>
            <TouchableHighlight onPress={showWorker}>
            <Image
              style={styles.logo}
              source={require('./../../assets/일꾼.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  일꾼개미</DataTable.Cell>
              <DataTable.Cell numeric>20자원</DataTable.Cell>
              <DataTable.Cell ></DataTable.Cell>
              <ReanimatedScreen2/>
            </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showSupervisor}>
            <Image
              style={styles.logo}
              source={require('./../../assets/일꾼.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  감독관개미</DataTable.Cell>
              <DataTable.Cell numeric>40자원</DataTable.Cell>
              <DataTable.Cell ></DataTable.Cell>
              <ReanimatedScreen2/>
            </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showOffice}>
            <Image
              style={styles.logo}
              source={require('./../../assets/일꾼.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  회사원개미</DataTable.Cell>
              <DataTable.Cell numeric>80자원</DataTable.Cell>
              <DataTable.Cell ></DataTable.Cell>
              <ReanimatedScreen2/>
            </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showChairman}>
            <Image
              style={styles.logo}
              source={require('./../../assets/일꾼.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  회장개미</DataTable.Cell>
              <DataTable.Cell numeric>200자원</DataTable.Cell>
              <DataTable.Cell ></DataTable.Cell>
              <ReanimatedScreen2/>
            </DataTable.Row>

          </DataTable>
    }

    else if (visibleBuilding) {
      list = 
      <DataTable style = {{backgroundColor: 'white'}}>
          <DataTable.Row >
          <TouchableHighlight onPress = {showHouse}>
            <Image
              style={styles.logo}
              source={require('./../../assets/아파트.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  벽돌집</DataTable.Cell>
              <DataTable.Cell numeric>20자원</DataTable.Cell>
          </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showApartment}>
            <Image
              style={styles.logo}
              source={require('./../../assets/아파트.png')}/>
          </TouchableHighlight>
              <DataTable.Cell>  아파트</DataTable.Cell>
              <DataTable.Cell numeric>40자원</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showCompany}>
            <Image
              style={styles.logo}
              source={require('./../../assets/아파트.png')}/>
            </TouchableHighlight>
              <DataTable.Cell>  개미 회사</DataTable.Cell>
              <DataTable.Cell numeric>80자원</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
            <TouchableHighlight onPress={showHotel}>
            <Image
              style={styles.logo}
              source={require('./../../assets/아파트.png')}/>
            </TouchableHighlight>
              <DataTable.Cell>  개미 호텔</DataTable.Cell>
              <DataTable.Cell numeric>200자원</DataTable.Cell>
            </DataTable.Row>
          </DataTable>    
    }

    else if (visibleMap) {
      list = 
      <View style = {{flexDirection: 'row', justifyContent: 'space-around',alignItems: 'center' , backgroundColor: 'gray', height: 258}}>
      <View style = {{width: 50, height: 231, justifyContent: 'space-between'}}>
          <TouchableHighlight onPress={() => {
           setStore(true),
            setCollection(false),
            setExpansion(false),
            setAchievement(false); 
          }}>
            <Image style = {{height: 50, width: 50}} source = {require('./../../assets/ButtonStore.png')}/>
          </TouchableHighlight>

          <TouchableHighlight onPress={() => {
            setStore(false),
            setCollection(true),
            setExpansion(false),
            setAchievement(false);
          }}>
            <Image style = {{height: 50, width: 50}} source = {require('./../../assets/ButtonCollection.png')}/>
          </TouchableHighlight >

          <TouchableHighlight onPress={() => {
            setStore(false),
            setCollection(false),
            setExpansion(true),
            setAchievement(false);
          }}>
            <Image style = {{height: 50, width: 50}} source = {require('./../../assets/확장_Button.png')}/>
          </TouchableHighlight>

          <TouchableHighlight onPress={() => {
            setStore(false),
            setCollection(false),
            setExpansion(false),
            setAchievement(true);
          }}>
            <Image style = {{height: 50, width: 50}} source = {require('./../../assets/업적_Button.png')}/>
          </TouchableHighlight>

      </View>
      <View style = {{flexDirection: 'column', alignItems: 'center', justifyContent: 'center', justifyContent: 'space-around', backgroundColor: 'white', 
      width: 189, height: 230}}>
          <Modal visible = {visibleStore}>
            <View style = {{flexDirection: 'column', alignItems: 'center', justifyContent: 'center', justifyContent: 'space-around', backgroundColor: 'white', 
            width: 189, height: 230}}>
            <Image source = {require('./../../assets/상점.png')}/>
            <Image source = {require('./../../assets/GoButton.png')}/>
            </View>
          </Modal>

          <Modal visible = {visibleCollection}>
            <View style = {{flexDirection: 'column', alignItems: 'center', justifyContent: 'center', justifyContent: 'space-around', backgroundColor: 'white',
             width: 189, height: 230}}>
            <Image source = {require('./../../assets/수집.png')}/>
            <Image source = {require('./../../assets/GoButton.png')}/>
            </View>
          </Modal>

          <Modal visible = {visibleExpansion}>
            <View style = {{flexDirection: 'column', alignItems: 'center', justifyContent: 'center', justifyContent: 'space-around', backgroundColor: 'white', 
            width: 189, height: 230}}>
            <Image source = {require('./../../assets/확장.png')}/>
            <Image source = {require('./../../assets/GoButton.png')}/>
            </View>
          </Modal>

          <Modal visible = {visibleAchievement}>
            <View style = {{flexDirection: 'column', alignItems: 'center', justifyContent: 'center', justifyContent: 'space-around', backgroundColor: 'white', 
            width: 189, height: 230}}>
            <Image source = {require('./../../assets/업적.png')}/>
            <Image source = {require('./../../assets/GoButton.png')}/>
            </View>
          </Modal>
      </View>
      </View>
    }

    else {
      list = null
    }
  }

  else  {
    list = null
  }

  if (cityClick) {    
    clickCity = <Image source = {require('./../../assets/CityButtonClick.png')} />;
  }

  else  {
    clickCity = <Image source = {require('./../../assets/CityButton.png')} />;
  }

  if (antClick) {    
    clickAnt = <Image source = {require('./../../assets/AntButtonClick.png')} />;
  }

  else  {
    clickAnt = <Image source = {require('./../../assets/AntButton.png')} />;
  }

  if (buildingClick) {    
    clickBuilding = <Image source = {require('./../../assets/BuildingButtonClick.png')} />;
  }

  else  {
    clickBuilding = <Image source = {require('./../../assets/BuildingButton.png')} />;
  }

  if (mapClick) {    
    clickMap = <Image source = {require('./../../assets/MapButtonClick.png')} />;
  }

  else  {
    clickMap = <Image source = {require('./../../assets/MapButton.png')} />;
  }


return(
  <Provider>    
  <View>
  <ImageBackground source = {background} style = {styles.back}>
  {expansion}
  <View style = {styles.setting}>
    <TouchableHighlight onPress={pressSetting}>
      <Image
        style={styles.logo}
        source={require('./../../assets/optionIcon.png')}
      />
    </TouchableHighlight >
    {city1}

  </View>  
    

    <View style = {{flex: 1, justifyContent: 'flex-end'}}>
    <View style = {{flex: 1, justifyContent: 'flex-end', alignItems: 'flex-end'}}>
      <TouchableHighlight onPress = {() => {
        if (visbleList) {
          setList(false);
        }

        else  {
          setList(true);
        }
      }}>
        <Image source = {require('./../../assets/UIDown.png')} />
      </TouchableHighlight>     
    </View>
    {list} 
      <ImageBackground source = {require('./../../assets/UI.png')} style = {{width: '100%', height: 50}}>
      <View style = {{flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-around'}}>


      <TouchableHighlight onPress={() => {
            setCity(false),
            setAnt(true),
            setBuilding(false),
            setMap(false);

            setCityClick(false);
            setAntClick(true);
            setBuildingClick(false);
            setMapClick(false);
          }}
          >
            {clickAnt}
      </TouchableHighlight>

      <TouchableHighlight onPress={() => {
            setCity(false),
            setAnt(false),
            setBuilding(true),
            setMap(false);

            setCityClick(false);
            setAntClick(false);
            setBuildingClick(true);
            setMapClick(false);
          }}
          >
            {clickBuilding}
      </TouchableHighlight>

      <TouchableHighlight onPress={() => {
            setCity(false),
            setAnt(false),
            setBuilding(false),
            setMap(true);

            setCityClick(false);
            setBuildingClick(false);
            setAntClick(false);
            setMapClick(true);
          }}
          >
            {clickMap}
      </TouchableHighlight>              
      </View>                
      </ImageBackground>      
    </View>
  </ImageBackground>
  {main}
  </View>

  <Portal>
    <Modal visible={visibleHouse} onDismiss={hideHouse} >
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Building_Ex_벽돌집.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleApartment} onDismiss={hideApartment}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Building_Ex_아파트.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleCompany} onDismiss={hideCompany}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Building_Ex_회사.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleHotel} onDismiss={hideHotel}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Building_Ex_호텔.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleWorker} onDismiss={hideWorker} >
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Ant_Ex_일꾼.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleSupervisor} onDismiss={hideSupervisor}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Ant_Ex_감독.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleOffice} onDismiss={hideOffice}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Ant_Ex_회사원.png')}/>
      </View>
    </Modal>

    <Modal visible={visibleChairman} onDismiss={hideChairman}>
      <View style = {{alignItems: 'center', justifyContent: 'center'}}>
        <Image source = {require('./../../assets/Ant_Ex_회장.png')}/>
      </View>
    </Modal>

  </Portal>
  </Provider>  
);
}

const Stack = createStackNavigator();
const Tab = createBottomTabNavigator();

export default class Main extends React.Component {

  render()
  {
    return (
      <NavigationContainer>
        <Stack.Navigator >
          <Stack.Screen name = "Main" component = {MainScreen} options = {{headerShown: false}}></Stack.Screen>
        </Stack.Navigator>
      </NavigationContainer>
    );
  }

  }

const styles = StyleSheet.create({
    container: {
      flex: 1,
    },

    safeAreaContainer : 
    {
      flex: 1,
      backgroundColor: 'white',
      paddingTop: Platform.OS == 'android' ? 24 : 0,
      justifyContent: 'center', 
      alignItems: 'center'
    },  

    text1: 
    {
      fontSize: 24,
      backgroundColor: 'orange',
    }, 

    touchable: 
    {
      flex: 1,

    }, 

    setting: 
    {
      paddingTop: Platform.OS == 'android' ? 24 : 0,
      alignItems: 'flex-end',
    }, 

    city: 
    {
      flexDirection:'row',
      alignItems: 'flex-start'
    },
    logo: {
     // backgroundColor: '#056ecf',
      height: 50,
      width: 50,
    },

    wrap: {flex: 1, justifyContent: 'center'},

    square: {
      backgroundColor: 'blue',
      alignSelf: 'center',
    },

    buttonStyle: {
      backgroundColor: "gray",
      borderRadius: 15,
      margin: 5,
    },

    back: {
      width: '100%', 
      height: '100%',
    }, 

  });

  const s = StyleSheet.create({
    backgroundImage: {
        flex: 1,
        width: null,
        height: null,
    }
  });
